#!/bin/bash
set -e
# Download data
# DATA_DIR="data/"

#################
# PARAMETERS
#################
num_thr=8
mode="default"
param1=8.0
param2=0.0
param3=0.0

usage()
{
cat << EOF

Denoising tool for genomic reads. Works on fixed length reads of length less than 256.

Usage:
Denoising - denoise FASTQ. Output written to .dna.d, .quality, .id files 

./denoise -d FASTQ_file -1 param1 -2 param2 -3 param3 -t num_thr

-t num_threads - Default 8

Help (this message)
./harc -h

See README and more supplementary information at:
https://github.com/shubhamchandak94/fastq_denoising

EOF
exit 0
}

denoise()
{
	pathname=$(dirname $filename)
	if [ -d "$pathname/output" ]; then
  		echo "Directory named output already exists in directory containing FASTQ file. Remove directory and run again."
		exit 1
	fi
	mkdir -p $pathname/output/
	echo "*** Preprocessing ***"
	echo $filename
	readlen="$(head -2 $filename | tail -1 | wc -L)"
	if (($readlen > 256));then
		echo "Maximum read length exceeded" 
		exit 1
	fi
	./src/preprocess.out $filename $pathname $readlen
	readlen="$(head $pathname/output/input.dna | wc -L)"
	echo "#define maxshift $((readlen/2))" > src/config.h

	echo "#define thresh $reorder_thresh" >> src/config.h
	echo "#define numdict 2" >> src/config.h
	echo "#define maxsearch 1000" >> src/config.h
	echo "#define dict1_start $(( readlen > 100 ? readlen/2-20 : readlen/2-readlen*20/100 ))" >> src/config.h
	echo "#define dict1_end $((readlen/2-1))" >> src/config.h
	echo "#define dict2_start $((readlen/2))" >> src/config.h
	echo "#define dict2_end $(( readlen > 100 ? readlen/2-1+20 : readlen/2-1+readlen*20/100 ))" >> src/config.h

	echo "#define readlen $readlen" >> src/config.h
	echo "#define num_thr $num_thr" >> src/config.h

	g++ src/denoise.cpp -march=native -O3 -fopenmp -lpthread -std=c++11 -o src/denoise.out
	./src/denoise.out $pathname $mode $param1 $param2 $param3

	mv $pathname/output/output.id $pathname/$(basename "$filename" .fastq).id
	mv $pathname/output/output.dna $pathname/$(basename "$filename" .fastq).dna.d
	mv $pathname/output/output.quality $pathname/$(basename "$filename" .fastq).quality
	rm -r $pathname/output/
}

#Check the number of arguments. If none are passed, print help and exit.
NUMARGS=$#
if [ $NUMARGS -eq 0 ]; then
 usage
fi

mode=''

while getopts ':d:t:1:2:3:h' opt; do
  case "$opt" in
    d) mode='d' && filename=$OPTARG;;
    t) num_thr=$OPTARG;;
    m) mode=$OPTARG;;
    1) param1=$OPTARG;;
    2) param2=$OPTARG;;
	3) param3=$OPTARG;;
    h) usage ;;
    \?) usage ;;
    *) usage ;;
  esac
done

if [[ $mode == 'd' ]];then
denoise
else
echo "-d flag required"
usage
exit 1
fi;
