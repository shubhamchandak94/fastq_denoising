#!/bin/bash
set -e
# Download data
# DATA_DIR="data/"

#################
# PARAMETERS
#################
reorder_thresh=4
realign_thresh=8
denoise_thresh=0.0





usage()
{
cat << EOF

HARC compression tool for genomic reads. Works on fixed length reads of length less than 256.

Usage: 
Compression - compresses FASTQ reads. Output written to .harc file
./harc -c FASTQ_file [-p] [-t num_threads] [-q]
-p Preserve order of reads
-t num_threads - Default 8
-q Write quality values and Read IDs to .quality and .id files, respectively. Quality values and IDs are appropriately reordered if -p is not specified. 

Decompression - decompresses reads. Output written to .dna.d file
./harc -d HARC_file [-p] [-t num_threads] [-m max_memory]
-p Get reads in original order (slower). Only applicable if -p was used during compression.
-t num_threads - Default 8
-m max_memory - Controls memory-time tradeoff for decompression with -p. Specify max memory in GB (minimum 3 GB for 3 threads). e.g. -m 10 for 10 GB maximum memory. Default: 7 GB (note: less than 3 GB memory required if -p not specified)

Help (this message)
./harc -h

See README and more supplementary information at:
https://github.com/shubhamchandak94/HARC

EOF
exit 0
}

compress()
{
	pathname=$(dirname $filename)
	if [ -d "$pathname/output" ]; then
  		echo "Directory named output already exists in directory containing FASTQ file. Remove directory and run again."
		exit 1
	fi
	mkdir -p $pathname/output/
	echo "*** Preprocessing ***"
	echo $filename
	readlen="$(head -2 $filename | tail -1 | wc -L)"
	if (($readlen > 256));then
		echo "Maximum read length exceeded" 
		exit 1
	fi
	./src/preprocess.out $filename $pathname $readlen
	readlen="$(head $pathname/output/input_clean.dna | wc -L)"
	echo "#define maxmatch $((readlen/2))" > src/config.h

	echo "#define thresh $reorder_thresh" >> src/config.h

	echo "#define thresh_s $realign_thresh" >> src/config.h
	echo "#define numdict 2" >> src/config.h
	echo "#define maxsearch 1000" >> src/config.h
	echo "#define dict1_start $(( readlen > 100 ? readlen/2-32 : readlen/2-readlen*32/100 ))" >> src/config.h
	echo "#define dict1_end $((readlen/2-1))" >> src/config.h
	echo "#define dict2_start $((readlen/2))" >> src/config.h
	echo "#define dict2_end $(( readlen > 100 ? readlen/2-1+32 : readlen/2-1+readlen*32/100 ))" >> src/config.h

	echo "#define readlen $readlen" >> src/config.h
	echo "#define num_thr $num_thr" >> src/config.h

	g++ src/reorder.cpp -w -march=native -O3 -fopenmp -lpthread -std=c++11 -o src/reorder.out
	 
	./src/reorder.out $pathname
	g++ src/reorder_quality_before_encoding.cpp -w -march=native -O3 -fopenmp -std=c++11 -o src/reorder_quality_before_encoding.out
	./src/reorder_quality_before_encoding.out $pathname
	
	g++ src/encoder.cpp -w -march=native -O3 -fopenmp -lpthread -std=c++11 -o src/encoder.out
	./src/encoder.out $pathname $preserve_order $denoise_thresh
	
	#remove temporary files
	rm $pathname/output/temp.dna
	rm $pathname/output/tempflag.txt
	rm $pathname/output/temppos.txt
	rm $pathname/output/read_rev.txt
	
	#tar files produced by the threads
	mkdir -p $pathname/output/read_noise
	mv $pathname/output/read_noise.txt* $pathname/output/read_noise
	mkdir -p $pathname/output/read_noisepos
	mv $pathname/output/read_noisepos.txt* $pathname/output/read_noisepos
	mkdir -p $pathname/output/read_pos
	mv $pathname/output/read_pos.txt* $pathname/output/read_pos
	mkdir -p $pathname/output/read_seq
	mv $pathname/output/read_seq.txt* $pathname/output/read_seq
	mkdir -p $pathname/output/read_rev
	mv $pathname/output/read_rev.txt* $pathname/output/read_rev

	tar -cf	$pathname/output/read_noise.tar -C $pathname/output/read_noise .
	tar -cf	$pathname/output/read_noisepos.tar -C $pathname/output/read_noisepos .
	tar -cf	$pathname/output/read_pos.tar -C $pathname/output/read_pos .
	tar -cf	$pathname/output/read_seq.tar -C $pathname/output/read_seq .
	tar -cf	$pathname/output/read_rev.tar -C $pathname/output/read_rev .
	
	rm -r $pathname/output/read_noise
	rm -r $pathname/output/read_noisepos
	rm -r $pathname/output/read_pos
	rm -r $pathname/output/read_seq
	rm -r $pathname/output/read_rev
	
	#compress and create tarball

	./src/libbsc/bsc e $pathname/output/read_pos.tar $pathname/output/read_pos.tar.bsc -b64p -t$num_thr
	./src/libbsc/bsc e $pathname/output/read_noise.tar $pathname/output/read_noise.tar.bsc -b64p -t$num_thr
	7z a $pathname/output/read_noisepos.tar.7z $pathname/output/read_noisepos.tar -mmt=$numt_thr
	./src/libbsc/bsc e $pathname/output/input_N.dna $pathname/output/input_N.dna.bsc -b64p -t$num_thr

	7z a $pathname/output/read_meta.txt.7z $pathname/output/read_meta.txt -mmt=$numt_thr
	7z a $pathname/output/read_rev.tar.7z $pathname/output/read_rev.tar -mmt=$num_thr
	./src/libbsc/bsc e $pathname/output/read_seq.tar $pathname/output/read_seq.tar.bsc -b64p -t$num_thr 
	./src/libbsc/bsc e $pathname/output/read_singleton.txt $pathname/output/read_singleton.txt.bsc -b64p -t$num_thr 
	if [[ $preserve_order == "True" ]];then
		g++ src/restore_quality_order.cpp -march=native -O3 -std=c++11 -o src/restore_quality_order.out
		./src/restore_quality_order.out $pathname	
		./src/pack_order.out $pathname	
		7z a $pathname/output/read_order.bin.7z $pathname/output/read_order.bin -mmt=$num_thr
		7z a $pathname/output/read_order_N.bin.7z $pathname/output/read_order_N.bin -mmt=$num_thr
		7z a $pathname/output/read_order_N_pe.bin.7z $pathname/output/read_order_N_pe.bin -mmt=$num_thr
		if [[ $preserve_quality == "True" ]];then
			mv $pathname/output/output.quality $pathname/$(basename "$filename" .fastq).quality
			mv $pathname/output/output.id $pathname/$(basename "$filename" .fastq).id
			rm $pathname/output/*.quality
		fi
	else
		if [[ $preserve_quality == "True" ]];then
			echo "Reordering ids"
			g++ src/reorder_id.cpp -march=native -O3 -std=c++11 -o src/reorder_id.out
			./src/reorder_id.out $pathname
			cat $pathname/output/read_aligned_and_singletons.quality $pathname/output/read_unaligned_N.quality > $pathname/output/output.quality
			mv $pathname/output/output.quality $pathname/$(basename "$filename" .fastq).quality
			rm $pathname/output/*.quality
			mv $pathname/output/output.id $pathname/$(basename "$filename" .fastq).id
			rm $pathname/output/*.id
			echo "Done!"
		fi	
	fi
	rm $pathname/output/*.txt $pathname/output/*.dna $pathname/output/*.tar $pathname/output/*.bin $pathname/output/*.singleton
	tar -cf $pathname/$(basename "$filename" .fastq).harc -C $pathname/output .
	rm -r $pathname/output/
}

decompress()
{
	echo "Decompression ..."
	pathname=$(dirname $filename)
	if [ -d "$pathname/output" ]; then
  		echo "Directory named output already exists in directory containing .tar file. Remove directory and run again."
		exit 1
	fi
	mkdir -p $pathname/output
	tar -xf $filename -C $pathname/output
	if [[ $preserve_order == "True" ]];then
		if [ ! -f $pathname/output/read_order.bin.7z ];then
			echo "Not compressed using -p flag. Order cannot be restored"
			usage
			exit 1
		fi
	fi

	./src/libbsc/bsc d $pathname/output/read_pos.tar.bsc $pathname/output/read_pos.tar -t$num_thr
	./src/libbsc/bsc d $pathname/output/read_noise.tar.bsc $pathname/output/read_noise.tar -t$num_thr
	7z e $pathname/output/read_noisepos.tar.7z -o$pathname/output/
	./src/libbsc/bsc d $pathname/output/input_N.dna.bsc $pathname/output/input_N.dna -t$num_thr
	7z e $pathname/output/read_meta.txt.7z -o$pathname/output/
	7z e $pathname/output/read_rev.tar.7z -o$pathname/output/
	./src/libbsc/bsc d $pathname/output/read_seq.tar.bsc $pathname/output/read_seq.tar -t$num_thr
	./src/libbsc/bsc d $pathname/output/read_singleton.txt.bsc $pathname/output/read_singleton.txt -t$num_thr
	
	
	tar -xf $pathname/output/read_pos.tar -C $pathname/output/
	tar -xf $pathname/output/read_noisepos.tar -C $pathname/output/
	tar -xf $pathname/output/read_noise.tar -C $pathname/output/
	tar -xf $pathname/output/read_rev.tar -C $pathname/output/
	tar -xf $pathname/output/read_seq.tar -C $pathname/output/
	
	num_thr_e=$(ls $pathname/output/read_pos.txt* | wc -l) #number of encoding threads
			
	if [[ $preserve_order == "True" ]];then
		readlen=$( cat $pathname/output/read_meta.txt )
		echo "#define readlen $readlen" > src/config.h
		echo "#define MAX_BIN_SIZE $memory" >> src/config.h
		echo "#define num_thr $num_thr" >> src/config.h
		echo "#define num_thr_e $num_thr_e" >> src/config.h
		g++ src/decoder_preserve.cpp -O3 -march=native -fopenmp -std=c++11 -o src/decoder_preserve.out
		7z e $pathname/output/read_order.bin.7z -o$pathname/output/
		7z e $pathname/output/read_order_N.bin.7z -o$pathname/output/
		7z e $pathname/output/read_order_N_pe.bin.7z -o$pathname/output/
		./src/unpack_order.out $pathname
		./src/decoder_preserve.out $pathname
		./src/merge_N.out $pathname
		echo "Done!"
	else
		./src/decoder.out $pathname $num_thr $num_thr_e
	fi
	mv $pathname/output/output.dna $pathname/$(basename "$filename" .harc).dna.d
        rm -r $pathname/output/
}

#Initialize variables to default values.
num_thr=8

#Check the number of arguments. If none are passed, print help and exit.
NUMARGS=$#
if [ $NUMARGS -eq 0 ]; then
 usage
fi

mode=''
preserve_order="False"
#preserve_quality always true now
preserve_quality="True"
memory='7'

while getopts ':c:d:t:a:m:n:r:pqh' opt; do
  case "$opt" in
    c) [[ -n "$mode" ]] && usage || mode='c' && filename=$OPTARG;;
    d) [[ -n "$mode" ]] && usage || mode='d' && filename=$OPTARG;;
    t) num_thr=$OPTARG;;
    m) memory=$OPTARG;;
    p) preserve_order="True";;
    q) preserve_quality="True";;
    n) denoise_thresh=$OPTARG;;
    a) realign_thresh=$OPTARG;;
    r) reorder_thresh=$OPTARG;;	
    h) usage ;;
    \?) usage ;;
    *) usage ;;
  esac
done

if [[ $mode == 'c' ]];then
compress
elif [[ $mode == 'd' ]];then
decompress
else
echo "Either -c or -d required"
usage
exit 1
fi;
